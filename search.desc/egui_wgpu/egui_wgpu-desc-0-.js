searchState.loadedDescShard("egui_wgpu", 0, "This crates provides bindings between <code>egui</code> and wgpu.\nYou can use this to do custom <code>wgpu</code> rendering in an egui …\nYou can use this for storage when implementing …\nA callback trait that can be used to compose an …\nConstruct a wgpu setup using some predefined settings &amp; …\nRun on an existing wgpu setup.\nMethod for selecting an adapter on native.\nInstructs egui to recreate the surface, then skip the …\nAccess to the render state for egui.\nRenderer for a egui based GUI.\nInformation about the screen used for rendering.\nDo nothing and skip the current frame.\nSpecifies which action should be taken as consequence of a …\nConfiguration for using wgpu with eframe or the egui-wgpu …\nAn error produced by egui-wgpu.\nConfiguration for creating a new wgpu setup.\nConfiguration for using an existing wgpu setup.\nWgpu adapter used for rendering.\nA human-readable summary about an adapter\nAll the available adapters.\nBindgroup for the texture + sampler.\nStorage for resources shared with all invocations of …\nHelpers for capturing screenshots of the UI.\nCreates a new <code>RenderState</code>, containing everything needed …\nTake’s epi’s depth/stencil bits and returns the …\nDesired maximum number of frames that the presentation …\nWgpu device used for rendering, created from the adapter.\nConfiguration passed on device request, given an adapter\nCalled after all <code>CallbackTrait::prepare</code> calls are done.\nCalled after all <code>CallbackTrait::prepare</code> calls are done.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInstance descriptor for creating a wgpu instance.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOptional selector for native adapters.\nCreates a renderer for a egui UI.\nCreates a new <code>wgpu::Instance</code> or clones the existing one.\nCreates a new <code>epaint::PaintCallback</code> from a callback trait …\nCallback for surface errors.\nOptions describing the sampler used in the bind group. …\nCalled after all <code>CallbackTrait::finish_prepare</code> calls are …\nTries to parse the adapter’s vendor ID to a …\nHigh-DPI scale factor (pixels per point).\nPower preference for the adapter if …\nFind the framebuffer format that egui prefers\nPresent mode used for the primary surface.\nWgpu queue used for rendering, created from the adapter.\nRegisters a <code>wgpu::Texture</code> with a <code>epaint::TextureId</code>.\nRegisters a <code>wgpu::Texture</code> with a <code>epaint::TextureId</code> while …\nExecutes the egui renderer onto an existing wgpu …\nEgui renderer responsible for drawing the UI.\nSize of the window in physical pixels.\nThe target texture format used for presenting to the …\nGet the WGPU texture and bind group associated to a …\nThe texture may be None if the <code>TextureId</code> is just a handle …\nOption path to output a wgpu trace file.\nUploads the uniform, vertex and index data used by the …\nRegisters a <code>wgpu::Texture</code> with an existing …\nRegisters a <code>wgpu::Texture</code> with an existing …\nShould be called before <code>Self::render</code>.\nHow to create the wgpu adapter &amp; device\nModule for painting <code>egui</code> with <code>wgpu</code> on <code>winit</code>.\nA texture and a buffer for reading the rendered frame back …\nCreates a new asynchronous channel, returning the …\nHandles copying from the <code>CaptureState</code> texture to the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nHandles copying from the <code>CaptureState</code> texture to the …\nUpdates the <code>CaptureState</code> if the size of the surface …\nEverything you need to paint egui with <code>wgpu</code> on <code>winit</code>.\nReturns the argument unchanged.\nCall this at the beginning of each frame to receive the …\nCalls <code>U::from(self)</code>.\nReturns the maximum texture dimension supported if known\nManages <code>wgpu</code> state, including surface state, required to …\nReturns two things:\nGet the <code>RenderState</code>.\nUpdates (or clears) the <code>winit::window::Window</code> associated …\nUpdates (or clears) the <code>winit::window::Window</code> associated …")