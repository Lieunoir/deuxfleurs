searchState.loadedDescShard("cgmath", 0, "A low-dimensional linear algebra library, targeted at …\nThe requisite parameters for testing for approximate …\nEquality that is defined using the absolute difference of …\nAngles and their associated trigonometric functions.\nAn array containing elements of type <code>Element</code>\nBase floating point types\nBase numeric types with partial ordering\nA two-dimensional rotation matrix.\nA three-dimensional rotation matrix.\nNumbers which have upper and lower bounds\nThe column vector of the matrix.\nThe row/column vector of the matrix.\nA generic transformation consisting of a rotation, …\nAn angle, in degrees.\nThe associated space of displacement vectors.\nElement-wise arithmetic operations. These are supplied for …\nUsed for specifying relative comparisons.\nPoints in a Euclidean space with an associated space of …\nA set of Euler angles representing a rotation in …\nVectors that also have a dot (or inner) product.\nA column-major matrix of arbitrary dimensions.\nA 2 x 2, column major matrix\nA 3 x 3, column major matrix\nA 4 x 4, column major matrix\nThe metric to be returned by the <code>distance</code> function.\nA type with a distance function between values.\nDefines a multiplicative identity element for <code>Self</code>.\nAn orthographic projection with arbitrary …\nA perspective projection with arbitrary …\nA perspective projection based on a vertical field-of-view …\nA point in 1-dimensional space.\nA point in 2-dimensional space.\nA point in 3-dimensional space.\nA quaternion in scalar/vector form.\nAn angle, in radians.\nThe requisite parameters for testing for approximate …\nEquality comparisons between two numbers using both the …\nA trait for a generic rotation. A rotation is a …\nA two-dimensional rotation.\nA three-dimensional rotation.\nThe row vector of the matrix.\nThe associated scalar.\nThe associated scalar over which the space is defined.\nA column-major major matrix where the rows and column …\nA trait representing an affine transformation that can be …\nThe result of transposing the matrix\nThe requisite parameters for testing for approximate …\nEquality comparisons between two numbers using both the …\nA 1-dimensional vector.\nA 2-dimensional vector.\nA 3-dimensional vector.\nA 4-dimensional vector.\nVectors that can be added together and multiplied by …\nDefines an additive identity element for <code>Self</code>.\nA test for equality that uses the absolute difference to …\nApproximate equality of using the absolute difference.\nThe inverse of <code>AbsDiffEq::abs_diff_eq</code>.\nApproximate inequality of using the absolute difference.\nCompute the arccosine of the ratio, returning the …\nReturns the angle between two vectors in radians.\nGet a mutable pointer to the first element of the array.\nGet a mutable pointer to the first element of the array.\nGet the pointer to the first element of the array.\nGet the pointer to the first element of the array.\nCompute the arcsine of the ratio, returning the resulting …\nAn assertion that delegates to <code>abs_diff_eq!</code>, and panics …\nAn assertion that delegates to <code>abs_diff_ne!</code>, and panics …\nAn assertion that delegates to <code>relative_eq!</code>, and panics …\nAn assertion that delegates to <code>relative_ne!</code>, and panics …\nAn assertion that delegates to <code>ulps_eq!</code>, and panics with a …\nAn assertion that delegates to <code>ulps_ne!</code>, and panics with a …\nCompute the arctangent of the ratio, returning the …\nCreate a shortest rotation to transform vector ‘a’ …\nReturns the interior bisector of the two angles.\nComponent-wise casting to another type\nComponent-wise casting to another type\nComponent-wise casting to another type\nComponent-wise casting to another type.\nComponent-wise casting to another type.\nComponent-wise casting to another type.\nComponent-wise casting to another type.\nComponent-wise casting to another type.\nComponent-wise casting to another type\nComponent-wise casting to another type\nComponent-wise casting to another type\nReturns the average position of all points in the slice.\nCombine this transform with another, yielding a new …\nCombine this transform with another, in-place.\nThe conjugate of the quaternion.\nConstrained conversion functions for assisting in …\nCompute the cosine of the angle, returning a unitless …\nCompute the cotangent of the angle.\nReturns the cross product of the vector and <code>other</code>.\nCompute the cosecant of the angle.\nThe default tolerance to use when testing values that are …\nThe default relative tolerance for testing values that are …\nThe default ULPs to tolerate when testing values that are …\nTake the determinant of this matrix.\nReturn a vector containing the diagonal of this matrix.\nThe distance between two values.\nReturns the squared distance.\nDot product of two vectors.\nVector dot (or inner) product.\nThis is a weird one, but its useful for plane calculations.\nReplace the epsilon value with the one specified.\nReplace the epsilon value with the one specified.\nReplace the epsilon value with the one specified.\nThe tolerance to use when testing values that are close …\nThe tolerance to use when testing values that are close …\nThe tolerance to use when testing values that are close …\nPeform the equality comparison\nPeform the equality comparison\nPeform the equality comparison\nCreate a <code>Vector3</code>, using the <code>x</code> and <code>y</code> values from this …\nCreate a <code>Vector4</code>, using the <code>x</code>, <code>y</code> and <code>z</code> values from this …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nClone the elements of a 2-dimensional matrix into the …\nReturns the argument unchanged.\nConvert the quaternion to a 3 x 3 rotation matrix.\nReturns the argument unchanged.\nClone the elements of a 3-dimensional matrix into the …\nClone the elements of a 2-dimensional matrix into the …\nConvert the quaternion to a 4 x 4 rotation matrix.\nReturns the argument unchanged.\nConvert the matrix to a quaternion\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a three-dimensional rotation matrix from a set of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a rotation by a given angle. Thus is a redundant …\nCreate a rotation from an angle around the <code>x</code> axis (pitch).\nCreate a rotation matrix from a rotation around the <code>x</code> axis …\nCreate a homogeneous transformation matrix from a rotation …\nCreate a rotation from an angle around the <code>y</code> axis (yaw).\nCreate a rotation matrix from a rotation around the <code>y</code> axis …\nCreate a homogeneous transformation matrix from a rotation …\nCreate a rotation from an angle around the <code>z</code> axis (roll).\nCreate a rotation matrix from a rotation around the <code>z</code> axis …\nCreate a homogeneous transformation matrix from a rotation …\nConstruct a new quaternion as a closest arc between two …\nCreate a rotation using an angle around a given axis.\nCreate a rotation matrix from an angle around an arbitrary …\nCreate a homogeneous transformation matrix from an angle …\nCreate a new matrix, providing columns.\nCreate a new matrix, providing columns.\nCreate a new matrix, providing columns.\nCreate a matrix from a non-uniform scale\nCreate a homogeneous transformation matrix from a set of …\nCreate a homogeneous transformation matrix from a set of …\nCreate a new rotation matrix from a quaternion.\nCreate a homogeneous transformation matrix from a scale …\nCreate a homogeneous transformation matrix from a scale …\nConstruct a new quaternion from a scalar and a vector.\nCreate a homogeneous transformation matrix from a …\nCreate a homogeneous transformation matrix from a …\nConstruct a vector from a single value, replicating it.\nCreate a new diagonal matrix using the supplied value.\nConvert a displacement vector to a point.\nCreate a perspective matrix from a view frustum.\nA full rotation.\nThe identity matrix. Multiplying this matrix with another …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a transform that “un-does” this one.\nInverse transform a vector using this transform\nInvert this matrix, returning a new matrix. …\nCreate a new rotation which “un-does” this rotation. …\nTest if this is a diagonal matrix. That is, every element …\nWhether all elements of the array are finite\nAre all entries in the matrix finite.\nAre all entries in the matrix finite.\nAre all entries in the matrix finite.\nTest if this matrix is the identity matrix. That is, it is …\nTest if this matrix is invertible.\nReturns <code>true</code> if <code>self</code> is equal to the multiplicative …\nReturns <code>true</code> if the vector is perpendicular (at right …\nTest if this matrix is symmetric. That is, it is equal to …\nReturns <code>true</code> if <code>self</code> is equal to the additive identity.\nGet the number of elements in the array type\nReturns the result of linearly interpolating the vector …\nCreate a rotation to a given direction with an ‘up’ …\nCreate a transformation that rotates a vector to look at …\nCreate a transformation matrix that will cause <code>unit_x()</code> to …\nCreate a rotation matrix that will cause a vector to point …\nCreate a homogeneous transformation matrix that will cause …\nCreate a homogeneous transformation matrix that will cause …\nCreate a transformation that rotates a vector to look at …\nCreate a homogeneous transformation matrix that will cause …\nCreate a transformation that rotates a vector to look at …\nCreate a homogeneous transformation matrix that will cause …\nCrate a transformation that will cause <code>unit_x()</code> to point at\nCreate a rotation matrix that will cause a vector to point …\nCreate a homogeneous transformation matrix that will cause …\nCreate a rotation matrix that will cause a vector to point …\nCreate a homogeneous transformation matrix that will cause …\nThe distance from the tail to the tip of the vector.\nReturns the squared magnitude.\nPerform the given operation on each field in the vector, …\nPerform the given operation on each field in the vector, …\nPerform the given operation on each field in the vector, …\nPerform the given operation on each field in the vector, …\nPerform the given operation on each field in the point, …\nPerform the given operation on each field in the point, …\nPerform the given operation on each field in the point, …\nReplace the maximum relative value with the one specified.\nThe relative tolerance for testing values that are …\nReplace the max ulps value with the one specified.\nThe ULPs to tolerate when testing values that are …\nReturns the largest finite number this type can represent\nReturns the middle point between two other points.\nReturns the smallest finite number this type can represent\nMultiplies the two transforms together. The result should …\nPeform the inequality comparison\nPeform the inequality comparison\nPeform the inequality comparison\nCreate a new matrix, providing values for each index.\nCreate a new matrix, providing values for each index.\nCreate a new matrix, providing values for each index.\nConstruct a new quaternion from one scalar component and …\nConstruct a new vector, using the provided values.\nConstruct a new vector, using the provided values.\nConstruct a new vector, using the provided values.\nConstruct a new vector, using the provided values.\nConstruct a set of euler angles.\nConstruct a new point, using the provided values.\nConstruct a new point, using the provided values.\nConstruct a new point, using the provided values.\nDo a normalized linear interpolation with <code>other</code>, by <code>amount</code>.\nReturns a vector with the same direction, but with a …\nReturn the angle, normalized to the range <code>[0, full_turn)</code>.\nReturn the angle, normalized to the range …\nReturns a vector with the same direction and a given …\nReturns the multiplicative identity element of <code>Self</code>, <code>1</code>.\nReturn the angle rotated by half a turn.\nThe point at the origin of the Euclidean space.\nCreate an orthographic projection matrix.\nThe perpendicular dot product of the vector and <code>other</code>.\nCreate a perspective projection matrix.\nThe short constructor.\nThe short constructor.\nThe short constructor.\nThis module contains the most common traits used in <code>cgmath</code>…\nThe product of the elements of the array.\nReturns the vector projection of the current inner space …\nA test for equality that uses a relative comparison if the …\nApproximate equality using both the absolute difference …\nThe inverse of <code>RelativeEq::relative_eq</code>.\nApproximate inequality using both the absolute difference …\nReplace a column in the array.\nRotate a point using this rotation, by converting it to its\nRotate a vector using this rotation.\nEvaluate the conjugation of <code>vec</code> by <code>self</code>.\nGet a row from this matrix by-value.\nThe scalar part of the quaternion.\nCompute the secant of the angle.\nSets <code>self</code> to the multiplicative identity element of <code>Self</code>, <code>1</code>…\nSets <code>self</code> to the additive identity element of <code>Self</code>, <code>0</code>.\nCompute the sine of the angle, returning a unitless ratio.\nCompute the sine and cosine of the angle, returning the …\nSpherical Linear Interpolation\nThe sum of the elements of the array.\nSwap two columns of this array.\nSwap the values at index <code>a</code> and <code>b</code>\nSwap the elements at indices <code>i</code> and <code>j</code> in-place.\nSwap two rows of this array.\nCompute the tangent of the angle, returning a unitless …\nConvert a point to a displacement vector.\nReturn the trace of this matrix. That is, the sum of the …\nTransform a point using this transform.\nTransform a vector using this transform.\nTranspose this matrix, returning a new matrix.\nTranspose this matrix in-place.\nCreate a <code>Vector2</code>, dropping the <code>z</code> value.\nCreate a <code>Vector3</code>, dropping the <code>w</code> value.\nCreate a <code>Vector3</code>, dropping the nth element.\nHalf of a full rotation.\nA third of a full rotation.\nA quarter of a full rotation.\nA sixth of a full rotation.\nA test for equality that uses units in the last place …\nApproximate equality using both the absolute difference …\nThe inverse of <code>UlpsEq::ulps_eq</code>.\nApproximate inequality using both the absolute difference …\nA unit vector in the <code>w</code> direction.\nA unit vector in the <code>x</code> direction.\nA unit vector in the <code>x</code> direction.\nA unit vector in the <code>x</code> direction.\nA unit vector in the <code>x</code> direction.\nA unit vector in the <code>y</code> direction.\nA unit vector in the <code>y</code> direction.\nA unit vector in the <code>y</code> direction.\nA unit vector in the <code>z</code> direction.\nA unit vector in the <code>z</code> direction.\nThe vector part of the quaternion.\nThe short constructor.\nThe short constructor.\nThe short constructor.\nThe short constructor.\nThe fourth column of the matrix.\nThe w component of the vector.\nThe first column of the matrix.\nThe first column of the matrix.\nThe first column of the matrix.\nThe x component of the vector.\nThe x component of the vector.\nThe x component of the vector.\nThe x component of the vector.\nThe angle to apply around the <em>x</em> axis. Also known at the …\nThe second column of the matrix.\nThe second column of the matrix.\nThe second column of the matrix.\nThe y component of the vector.\nThe y component of the vector.\nThe y component of the vector.\nThe angle to apply around the <em>y</em> axis. Also known at the <em>yaw</em>…\nThe third column of the matrix.\nThe third column of the matrix.\nThe z component of the vector.\nThe z component of the vector.\nThe angle to apply around the <em>z</em> axis. Also known at the …\nReturns the additive identity element of <code>Self</code>, <code>0</code>.\nConstruct a new vector where each component is the result …\nConstruct a new vector where each component is the result …\nConstruct a new vector where each component is the result …\nConstruct a new vector where each component is the result …\nConstruct a new point where each component is the result of\nConstruct a new point where each component is the result of\nConstruct a new point where each component is the result of\nForce a conversion into a 2-element array.\nForce a conversion into a 2x2-element array.\nForce a conversion into a 3-element array.\nForce a conversion into a 3x3-element array.\nForce a conversion into a 4-element array.\nForce a conversion into a 4x4-element array.\nAngles and their associated trigonometric functions.\nAn array containing elements of type <code>Element</code>\nNumbers which have upper and lower bounds\nThe column vector of the matrix.\nThe row/column vector of the matrix.\nThe associated space of displacement vectors.\nElement-wise arithmetic operations. These are supplied for …\nPoints in a Euclidean space with an associated space of …\nVectors that also have a dot (or inner) product.\nA column-major matrix of arbitrary dimensions.\nThe metric to be returned by the <code>distance</code> function.\nA type with a distance function between values.\nDefines a multiplicative identity element for <code>Self</code>.\nA trait for a generic rotation. A rotation is a …\nA two-dimensional rotation.\nA three-dimensional rotation.\nThe row vector of the matrix.\nThe associated scalar.\nThe associated scalar over which the space is defined.\nA column-major major matrix where the rows and column …\nA trait representing an affine transformation that can be …\nThe result of transposing the matrix\nVectors that can be added together and multiplied by …\nDefines an additive identity element for <code>Self</code>.\nCompute the arccosine of the ratio, returning the …\nReturns the angle between two vectors in radians.\nReturns the angle between two vectors in radians.\nGet a mutable pointer to the first element of the array.\nGet a mutable pointer to the first element of the array.\nGet a mutable pointer to the first element of the array.\nGet a mutable pointer to the first element of the array.\nGet the pointer to the first element of the array.\nGet the pointer to the first element of the array.\nGet the pointer to the first element of the array.\nGet the pointer to the first element of the array.\nCompute the arcsine of the ratio, returning the resulting …\nCompute the arctangent of the ratio, returning the …\nCreate a shortest rotation to transform vector ‘a’ …\nReturns the interior bisector of the two angles.\nReturns the interior bisector of the two angles.\nReturns the average position of all points in the slice.\nReturns the average position of all points in the slice.\nCombine this transform with another, yielding a new …\nCombine this transform with another, in-place.\nCombine this transform with another, in-place.\nCompute the cosine of the angle, returning a unitless …\nCompute the cotangent of the angle.\nCompute the cotangent of the angle.\nCompute the cosecant of the angle.\nCompute the cosecant of the angle.\nTake the determinant of this matrix.\nReturn a vector containing the diagonal of this matrix.\nThe distance between two values.\nThe distance between two values.\nReturns the squared distance.\nVector dot (or inner) product.\nThis is a weird one, but its useful for plane calculations.\nCreate a rotation by a given angle. Thus is a redundant …\nCreate a rotation from an angle around the <code>x</code> axis (pitch).\nCreate a rotation from an angle around the <code>x</code> axis (pitch).\nCreate a rotation from an angle around the <code>y</code> axis (yaw).\nCreate a rotation from an angle around the <code>y</code> axis (yaw).\nCreate a rotation from an angle around the <code>z</code> axis (roll).\nCreate a rotation from an angle around the <code>z</code> axis (roll).\nCreate a rotation using an angle around a given axis.\nCreate a matrix from a non-uniform scale\nConstruct a vector from a single value, replicating it.\nCreate a new diagonal matrix using the supplied value.\nConvert a displacement vector to a point.\nA full rotation.\nThe identity matrix. Multiplying this matrix with another …\nThe identity matrix. Multiplying this matrix with another …\nCreate a transform that “un-does” this one.\nInverse transform a vector using this transform\nInverse transform a vector using this transform\nInvert this matrix, returning a new matrix. …\nCreate a new rotation which “un-does” this rotation. …\nTest if this is a diagonal matrix. That is, every element …\nWhether all elements of the array are finite\nTest if this matrix is the identity matrix. That is, it is …\nTest if this matrix is the identity matrix. That is, it is …\nTest if this matrix is invertible.\nTest if this matrix is invertible.\nReturns <code>true</code> if <code>self</code> is equal to the multiplicative …\nReturns <code>true</code> if <code>self</code> is equal to the multiplicative …\nReturns <code>true</code> if the vector is perpendicular (at right …\nReturns <code>true</code> if the vector is perpendicular (at right …\nTest if this matrix is symmetric. That is, it is equal to …\nReturns <code>true</code> if <code>self</code> is equal to the additive identity.\nGet the number of elements in the array type\nReturns the result of linearly interpolating the vector …\nReturns the result of linearly interpolating the vector …\nCreate a rotation to a given direction with an ‘up’ …\nCreate a transformation that rotates a vector to look at …\nCreate a transformation that rotates a vector to look at …\nCreate a transformation that rotates a vector to look at …\nThe distance from the tail to the tip of the vector.\nThe distance from the tail to the tip of the vector.\nReturns the squared magnitude.\nReturns the squared magnitude.\nReturns the largest finite number this type can represent\nReturns the middle point between two other points.\nReturns the middle point between two other points.\nReturns the smallest finite number this type can represent\nReturns a vector with the same direction, but with a …\nReturns a vector with the same direction, but with a …\nReturn the angle, normalized to the range <code>[0, full_turn)</code>.\nReturn the angle, normalized to the range <code>[0, full_turn)</code>.\nReturn the angle, normalized to the range …\nReturn the angle, normalized to the range …\nReturns a vector with the same direction and a given …\nReturns a vector with the same direction and a given …\nReturns the multiplicative identity element of <code>Self</code>, <code>1</code>.\nReturn the angle rotated by half a turn.\nReturn the angle rotated by half a turn.\nThe point at the origin of the Euclidean space.\nThe product of the elements of the array.\nReturns the vector projection of the current inner space …\nReturns the vector projection of the current inner space …\nReplace a column in the array.\nReplace a column in the array.\nRotate a point using this rotation, by converting it to its\nRotate a point using this rotation, by converting it to its\nRotate a vector using this rotation.\nGet a row from this matrix by-value.\nCompute the secant of the angle.\nCompute the secant of the angle.\nSets <code>self</code> to the multiplicative identity element of <code>Self</code>, <code>1</code>…\nSets <code>self</code> to the multiplicative identity element of <code>Self</code>, <code>1</code>…\nSets <code>self</code> to the additive identity element of <code>Self</code>, <code>0</code>.\nSets <code>self</code> to the additive identity element of <code>Self</code>, <code>0</code>.\nCompute the sine of the angle, returning a unitless ratio.\nCompute the sine and cosine of the angle, returning the …\nThe sum of the elements of the array.\nSwap two columns of this array.\nSwap the values at index <code>a</code> and <code>b</code>\nSwap the elements at indices <code>i</code> and <code>j</code> in-place.\nSwap the elements at indices <code>i</code> and <code>j</code> in-place.\nSwap two rows of this array.\nCompute the tangent of the angle, returning a unitless …\nConvert a point to a displacement vector.\nReturn the trace of this matrix. That is, the sum of the …\nReturn the trace of this matrix. That is, the sum of the …\nTransform a point using this transform.\nTransform a vector using this transform.\nTranspose this matrix, returning a new matrix.\nTranspose this matrix in-place.\nHalf of a full rotation.\nHalf of a full rotation.\nA third of a full rotation.\nA third of a full rotation.\nA quarter of a full rotation.\nA quarter of a full rotation.\nA sixth of a full rotation.\nA sixth of a full rotation.\nReturns the additive identity element of <code>Self</code>, <code>0</code>.")