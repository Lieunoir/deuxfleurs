searchState.loadedDescShard("transform_gizmo", 0, "Provides a feature-rich and configurable gizmo that can be …\nRotate using an arcball (trackball)\nThis format is used for space-efficient color …\nThe default snapping distance for rotation in radians\nThe default snapping distance for translation\nThe default snapping distance for scale\nConfiguration of a gizmo.\nOperation mode of a gizmo.\nOrientation of a gizmo.\nControls the visual style of the gizmo\nTransformation axes are aligned to world space.\nPivot around each target’s own origin\nTransformation axes are aligned to the last target’s …\nPivot around the median point of targets\nAn ugly color that is planned to be replaced before making …\nRotate around the view forward axis\nRotate around the X axis\nRotate around the Y axis\nRotate around the Z axis\nScale uniformly in all directions\nScale along the X axis\nScale along the XY plane\nScale along the XZ plane\nScale along the Y axis\nScale along the YZ plane\nScale along the Z axis\nThe point in space around which all rotations are centered.\nTranslate along the view forward axis\nTranslate along the X axis\nTranslate along the XY plane\nTranslate along the XZ plane\nTranslate along the Y axis\nTranslate along the YZ plane\nTranslate along the Z axis\nGizmo points in the view direction\nGizmo points in the X-direction\nGizmo points in the Y-direction\nGizmo points in the Z-direction\nReturns an additive version of self\nAll modes\nReturns the modes that match to given axes exactly\nAll rotation modes\nAll scaling modes\nAll translation modes\nAxes this mode acts on\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nParses a color from a hex string.\nFrom <code>sRGBA</code> with premultiplied alpha.\nFrom <code>sRGBA</code> WITHOUT premultiplied alpha.\nMultiply with 0.5 to make color half as opaque, …\nGizmo size in pixels\nAlpha of the gizmo color when highlighted/active\nColor to use for highlighted and active axes. By default, …\nAlpha of the gizmo color when inactive\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs the alpha=0 ?\nIs this mode for rotation\nIs this mode for scaling\nIs this mode for translation\nLerp this color towards <code>other</code> by <code>t</code> in gamma space.\nMultiply with 0.5 to make color half as opaque in linear …\nIf set, this mode is forced active and other modes are …\nThe gizmo’s operation modes.\nDetermines the gizmo’s orientation relative to global or …\nPivot point for transformations\nRatio of window’s physical size to logical size.\nProjection matrix for the gizmo, determining how it is …\nColor of the forward axis\nAngle increment for snapping rotations, in radians.\nDistance increment for snapping translations.\nScale increment for snapping scalings.\nToggles snapping to predefined increments during …\nWidth (thickness) of the gizmo strokes\nPremultiplied RGBA\nFormats the color as a hex string.\nConverts to floating point values in the range 0-1 without …\nReturns an opaque version of self\nPremultiplied RGBA\nView matrix for the gizmo, aligning it with the camera’s …\nScreen area where the gizmo is displayed.\nVisual settings for the gizmo, affecting appearance and …\nColor of the x axis\nColor of the y axis\nColor of the z axis\nA 3D transformation gizmo.\nData used to draw <code>Gizmo</code>.\nInformation needed for interacting with the gizmo.\nResult of a gizmo transformation\nLinear RGBA colors.\nCurrent configuration used by the gizmo.\nCurrent cursor position in window coordinates.\nWhether dragging was started this frame. Usually this is …\nWhether the user is currently dragging. Usually this is …\nReturn all the necessary data to draw the latest gizmo …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nWhether the gizmo is hovered this frame. Some other UI …\nIndices to the vertex data.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWas this gizmo focused after the latest <code>Gizmo::update</code> call.\nCreates a new gizmo from given configuration\nUpdates the gizmo based on given interaction information.\nUpdates the configuration used by the gizmo.\nVertices in viewport space.\nThe rotation axis,\nThe latest rotation angle delta\nThe latest translation delta\nThe latest rotation delta\nWhether we are rotating along the view axis\nTotal rotation angle of the gizmo interaction\nTotal translation of the gizmo interaction\nTotal scale of the gizmo interaction\nTotal rotation of the gizmo interaction\nThe unit axes.\nThe unit axes.\nThe unit axes.\nThe unit axes.\nA 3x3 column major matrix.\nA 4x4 column major matrix.\n+Y\nA quaternion representing an orientation.\nA 2-dimensional vector.\nA 3-dimensional vector.\nA 4-dimensional vector.\nInfinite rectangle that contains every point.\nA 4x4 identity matrix, where all diagonal elements are <code>1</code>, …\nThe identity quaternion. Corresponds to no rotation.\nA 3x3 identity matrix, where all diagonal elements are <code>1</code>, …\nA 4x4 identity matrix, where all diagonal elements are <code>1</code>, …\nThe identity quaternion. Corresponds to no rotation.\nAll <code>f32::INFINITY</code>.\nAll <code>f64::INFINITY</code>.\nAll <code>f64::INFINITY</code>.\nAll <code>f64::INFINITY</code>.\n-X\nAll <code>f32::MAX</code>.\nAll <code>f64::MAX</code>.\nAll <code>f64::MAX</code>.\nAll <code>f64::MAX</code>.\nAll <code>f32::MIN</code>.\nAll <code>f64::MIN</code>.\nAll <code>f64::MIN</code>.\nAll <code>f64::MIN</code>.\nA 4x4 column major matrix.\nAn invalid <code>Rect</code> filled with <code>f32::NAN</code>.\nAll <code>f32::NAN</code>.\nAll NAN:s.\nAll NANs.\nAll NAN:s.\nAll NAN:s.\nAll NANs.\nAll <code>f64::NAN</code>.\nAll <code>f64::NAN</code>.\nAll <code>f64::NAN</code>.\nAll <code>f32::NEG_INFINITY</code>.\nAll <code>f64::NEG_INFINITY</code>.\nAll <code>f64::NEG_INFINITY</code>.\nAll <code>f64::NEG_INFINITY</code>.\nAll negative ones.\nAll negative ones.\nAll negative ones.\nAll negative ones.\nA unit vector pointing along the negative W axis.\nA unit vector pointing along the negative X axis.\nA unit vector pointing along the negative X axis.\nA unit vector pointing along the negative X axis.\nA unit vector pointing along the negative X axis.\nA unit vector pointing along the negative Y axis.\nA unit vector pointing along the negative Y axis.\nA unit vector pointing along the negative Y axis.\nA unit vector pointing along the negative Y axis.\nA unit vector pointing along the negative Z axis.\nA unit vector pointing along the negative Z axis.\nA unit vector pointing along the negative Z axis.\nThe inverse of <code>Self::EVERYTHING</code>: stretches from positive …\nAll ones.\nAll ones.\nAll ones.\nAll ones.\nA position on screen.\nA quaternion representing an orientation.\n+X\nA rectangular region of space.\n-Y\nA vector has a direction and length. A <code>Vec2</code> is often used …\nA 3-dimensional vector.\nA unit vector pointing along the positive W axis.\nRight\nA unit vector pointing along the positive X axis.\nA unit vector pointing along the positive X axis.\nA unit vector pointing along the positive X axis.\nA unit vector pointing along the positive X axis.\nDown\nA unit vector pointing along the positive Y axis.\nA unit vector pointing along the positive Y axis.\nA unit vector pointing along the positive Y axis.\nA unit vector pointing along the positive Y axis.\nA unit vector pointing along the positive Z axis.\nA unit vector pointing along the positive Z axis.\nA unit vector pointing along the positive Z axis.\nThe zero position, the origin. The top left corner in a …\nA <code>Rect</code> filled with zeroes.\nAll zeroes.\nA 4x4 matrix with all elements set to <code>0.0</code>.\nA 3x3 matrix with all elements set to <code>0.0</code>.\nA 4x4 matrix with all elements set to <code>0.0</code>.\nAll zeroes.\nAll zeroes.\nAll zeroes.\nReturns a vector containing the absolute value of each …\nTakes the absolute value of each element in <code>self</code>\nTakes the absolute value of each element in <code>self</code>\nTakes the absolute value of each element in <code>self</code>\nReturns a vector containing the absolute value of each …\nReturns a vector containing the absolute value of each …\nReturns a vector containing the absolute value of each …\nReturns true if the absolute difference of all elements …\nReturns true if the absolute difference of all elements …\nReturns true if the absolute difference of all elements …\nReturns true if the absolute difference of all elements …\nReturns true if the absolute difference of all elements …\nReturns true if the absolute difference of all elements …\nReturns true if the absolute difference of all elements …\nReturns true if the absolute difference of all elements …\nReturns true if the absolute difference of all elements …\nAdds two quaternions.\nAdds two quaternions.\nAdds two 3x3 matrices.\nAdds two 4x4 matrices.\nAdds two 4x4 matrices.\nMeasures the angle of the vector.\nReturns the angle (in radians) between two vectors in the …\nReturns the angle (in radians) for the minimal rotation …\nReturns the angle (in radians) for the minimal rotation …\nReturns the angle (in radians) between two vectors in the …\nReturns the angle of rotation (in radians) from <code>self</code> to <code>rhs</code>…\nCreate a unit vector with the given CW angle (in radians).\nTrue if any member is NaN.\nTrue if any member is NaN.\nTrue if any member is NaN.\nReturns some vector that is orthogonal to the given one.\nReturns some vector that is orthogonal to the given one.\nGiven a unit vector return two other vectors that together …\nGiven a unit vector return two other vectors that together …\nReturns any unit vector that is orthogonal to the given …\nReturns any unit vector that is orthogonal to the given …\nCasts all elements of <code>self</code> to <code>f64</code>.\nCasts all elements of <code>self</code> to <code>i16</code>.\nCasts all elements of <code>self</code> to <code>i16</code>.\nCasts all elements of <code>self</code> to <code>i16</code>.\nCasts all elements of <code>self</code> to <code>i16</code>.\nCasts all elements of <code>self</code> to <code>i64</code>.\nCasts all elements of <code>self</code> to <code>i64</code>.\nCasts all elements of <code>self</code> to <code>i64</code>.\nCasts all elements of <code>self</code> to <code>i64</code>.\nCasts all elements of <code>self</code> to <code>i8</code>.\nCasts all elements of <code>self</code> to <code>i8</code>.\nCasts all elements of <code>self</code> to <code>i8</code>.\nCasts all elements of <code>self</code> to <code>i8</code>.\nCasts all elements of <code>self</code> to <code>i32</code>.\nCasts all elements of <code>self</code> to <code>i32</code>.\nCasts all elements of <code>self</code> to <code>i32</code>.\nCasts all elements of <code>self</code> to <code>i32</code>.\nCasts all elements of <code>self</code> to <code>u16</code>.\nCasts all elements of <code>self</code> to <code>u16</code>.\nCasts all elements of <code>self</code> to <code>u16</code>.\nCasts all elements of <code>self</code> to <code>u16</code>.\nCasts all elements of <code>self</code> to <code>u64</code>.\nCasts all elements of <code>self</code> to <code>u64</code>.\nCasts all elements of <code>self</code> to <code>u64</code>.\nCasts all elements of <code>self</code> to <code>u64</code>.\nCasts all elements of <code>self</code> to <code>u8</code>.\nCasts all elements of <code>self</code> to <code>u8</code>.\nCasts all elements of <code>self</code> to <code>u8</code>.\nCasts all elements of <code>self</code> to <code>u8</code>.\nCasts all elements of <code>self</code> to <code>u32</code>.\nCasts all elements of <code>self</code> to <code>u32</code>.\nCasts all elements of <code>self</code> to <code>u32</code>.\nCasts all elements of <code>self</code> to <code>u32</code>.\nCasts all elements of <code>self</code> to <code>f32</code>.\nCasts all elements of <code>self</code> to <code>f32</code>.\nCasts all elements of <code>self</code> to <code>f32</code>.\nCasts all elements of <code>self</code> to <code>f32</code>.\nWidth / height\n<code>max.y</code>\n<code>max.y</code>\nReturns a vector containing the smallest integer greater …\nReturns a vector containing the smallest integer greater …\nReturns a vector containing the smallest integer greater …\nReturns a vector containing the smallest integer greater …\nReturn the given points clamped to be inside the rectangle …\nComponent-wise clamping of values, similar to <code>f32::clamp</code>.\nComponent-wise clamping of values, similar to <code>f64::clamp</code>.\nComponent-wise clamping of values, similar to <code>f64::clamp</code>.\nComponent-wise clamping of values, similar to <code>f64::clamp</code>.\nReturns a vector with a length no less than <code>min</code> and no …\nReturns a vector with a length no less than <code>min</code> and no …\nReturns a vector with a length no less than <code>min</code> and no …\nReturns a vector with a length no less than <code>min</code> and no …\nReturns a vector with a length no more than <code>max</code>.\nReturns a vector with a length no more than <code>max</code>.\nReturns a vector with a length no more than <code>max</code>.\nReturns a vector with a length no more than <code>max</code>.\nReturns a vector with a length no less than <code>min</code>.\nReturns a vector with a length no less than <code>min</code>.\nReturns a vector with a length no less than <code>min</code>.\nReturns a vector with a length no less than <code>min</code>.\nReturns a vector mask containing the result of a <code>==</code> …\nReturns a vector mask containing the result of a <code>==</code> …\nReturns a vector mask containing the result of a <code>==</code> …\nReturns a vector mask containing the result of a <code>==</code> …\nReturns a vector mask containing the result of a <code>&gt;=</code> …\nReturns a vector mask containing the result of a <code>&gt;=</code> …\nReturns a vector mask containing the result of a <code>&gt;=</code> …\nReturns a vector mask containing the result of a <code>&gt;=</code> …\nReturns a vector mask containing the result of a <code>&gt;</code> …\nReturns a vector mask containing the result of a <code>&gt;</code> …\nReturns a vector mask containing the result of a <code>&gt;</code> …\nReturns a vector mask containing the result of a <code>&gt;</code> …\nReturns a vector mask containing the result of a <code>&lt;=</code> …\nReturns a vector mask containing the result of a <code>&lt;=</code> …\nReturns a vector mask containing the result of a <code>&lt;=</code> …\nReturns a vector mask containing the result of a <code>&lt;=</code> …\nReturns a vector mask containing the result of a <code>&lt;</code> …\nReturns a vector mask containing the result of a <code>&lt;</code> …\nReturns a vector mask containing the result of a <code>&lt;</code> …\nReturns a vector mask containing the result of a <code>&lt;</code> …\nReturns a vector mask containing the result of a <code>!=</code> …\nReturns a vector mask containing the result of a <code>!=</code> …\nReturns a vector mask containing the result of a <code>!=</code> …\nReturns a vector mask containing the result of a <code>!=</code> …\nReturns the matrix column for the given <code>index</code>.\nReturns the matrix column for the given <code>index</code>.\nReturns the matrix column for the given <code>index</code>.\nReturns a mutable reference to the matrix column for the …\nReturns a mutable reference to the matrix column for the …\nReturns a mutable reference to the matrix column for the …\nReturns the quaternion conjugate of <code>self</code>. For a unit …\nReturns the quaternion conjugate of <code>self</code>. For a unit …\nReturns a vector with signs of <code>rhs</code> and the magnitudes of …\nReturns a vector with signs of <code>rhs</code> and the magnitudes of …\nReturns a vector with signs of <code>rhs</code> and the magnitudes of …\nReturns a vector with signs of <code>rhs</code> and the magnitudes of …\nComputes the cross product of <code>self</code> and <code>rhs</code>.\nComputes the cross product of <code>self</code> and <code>rhs</code>.\nReturns the determinant of <code>self</code>.\nReturns the determinant of <code>self</code>.\nReturns the determinant of <code>self</code>.\nComputes the Euclidean distance between two points in …\nComputes the Euclidean distance between two points in …\nComputes the Euclidean distance between two points in …\nComputes the Euclidean distance between two points in …\nThe distance from the rect to the position, squared.\nCompute the squared euclidean distance between two points …\nCompute the squared euclidean distance between two points …\nCompute the squared euclidean distance between two points …\nCompute the squared euclidean distance between two points …\nThe distance from the rect to the position.\nDivides a quaternion by a scalar value. The quotient is …\nDivides a quaternion by a scalar value. The quotient is …\nReturns the element-wise quotient of [Euclidean division] …\nReturns the element-wise quotient of [Euclidean division] …\nReturns the element-wise quotient of [Euclidean division] …\nReturns the element-wise quotient of [Euclidean division] …\nDivides a 4x4 matrix by a scalar.\nDivides a 3x3 matrix by a scalar.\nDivides a 4x4 matrix by a scalar.\nThe dot-product of two vectors.\nComputes the dot product of <code>self</code> and <code>rhs</code>.\nComputes the dot product of <code>self</code> and <code>rhs</code>. The dot product …\nComputes the dot product of <code>self</code> and <code>rhs</code>. The dot product …\nComputes the dot product of <code>self</code> and <code>rhs</code>.\nComputes the dot product of <code>self</code> and <code>rhs</code>.\nComputes the dot product of <code>self</code> and <code>rhs</code>.\nReturns a vector where every component is the dot product …\nReturns a vector where every component is the dot product …\nReturns a vector where every component is the dot product …\nReturns a vector where every component is the dot product …\nReturns the product of all elements of <code>self</code>.\nReturns the product of all elements of <code>self</code>.\nReturns the product of all elements of <code>self</code>.\nReturns the product of all elements of <code>self</code>.\nReturns the sum of all elements of <code>self</code>.\nReturns the sum of all elements of <code>self</code>.\nReturns the sum of all elements of <code>self</code>.\nReturns the sum of all elements of <code>self</code>.\nA <code>Rect</code> that contains every point above a certain y …\nA <code>Rect</code> that contains every point below a certain y …\nA <code>Rect</code> that contains every point to the left of the given …\nA <code>Rect</code> that contains every point to the right of the given …\nReturns a vector containing <code>e^self</code> (the exponential …\nReturns a vector containing <code>e^self</code> (the exponential …\nReturns a vector containing <code>e^self</code> (the exponential …\nReturns a vector containing <code>e^self</code> (the exponential …\nExpand by this much in each direction, keeping the center\nExpand by this much in each direction, keeping the center\nCreates a 4D vector from <code>self</code> and the given <code>w</code> value.\nCreates a 3D vector from <code>self</code> and the given <code>z</code> value.\nCreates a 4D vector from <code>self</code> and the given <code>w</code> value.\nExpand to include the given x coordinate\nExpand to include the given y coordinate\nReturns a vector containing the largest integer less than …\nReturns a vector containing the largest integer less than …\nReturns a vector containing the largest integer less than …\nReturns a vector containing the largest integer less than …\nReturns a vector containing the fractional part of the …\nReturns a vector containing the fractional part of the …\nReturns a vector containing the fractional part of the …\nReturns a vector containing the fractional part of the …\nReturns a vector containing the fractional part of the …\nReturns a vector containing the fractional part of the …\nReturns a vector containing the fractional part of the …\nReturns a vector containing the fractional part of the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a quaternion from a 3x3 rotation matrix inside a …\nCreates a quaternion from a 3x3 rotation matrix inside a …\nCreates an affine transformation matrix from the given 2D …\nCreates a 2D vector containing <code>[angle.cos(), angle.sin()]</code>. …\nCreates a new vector from an array.\nCreates a rotation quaternion from an array.\nCreates a rotation quaternion from an array.\nCreates a new vector from an array.\nCreates a new vector from an array.\nCreates a new vector from an array.\nCreates an affine transformation matrix containing a 3D …\nCreate a quaternion for a normalized rotation <code>axis</code> and …\nCreates a 3D rotation matrix from a normalized rotation …\nCreates an affine transformation matrix containing a 3D …\nCreate a quaternion for a normalized rotation <code>axis</code> and …\nCreates a 4x4 matrix from four column vectors.\nCreates a 3x3 matrix from three column vectors.\nCreates a 4x4 matrix from four column vectors.\nCreates a 4x4 matrix from a <code>[f32; 16]</code> array stored in …\nCreates a 3x3 matrix from a <code>[f64; 9]</code> array stored in …\nCreates a 4x4 matrix from a <code>[f64; 16]</code> array stored in …\nCreates a 4x4 matrix from a <code>[[f32; 4]; 4]</code> 4D array stored …\nCreates a 3x3 matrix from a <code>[[f64; 3]; 3]</code> 3D array stored …\nCreates a 4x4 matrix from a <code>[[f64; 4]; 4]</code> 4D array stored …\nCreates a 4x4 matrix from the first 16 values in <code>slice</code>.\nCreates a 3x3 matrix from the first 9 values in <code>slice</code>.\nCreates a 4x4 matrix from the first 16 values in <code>slice</code>.\nCreates a 4x4 matrix with its diagonal set to <code>diagonal</code> and …\nCreates a 3x3 matrix with its diagonal set to <code>diagonal</code> and …\nCreates a 4x4 matrix with its diagonal set to <code>diagonal</code> and …\nCreates a affine transformation matrix containing a …\nCreates a quaternion from the given Euler rotation …\nCreates a 3D rotation matrix from the given euler rotation …\nCreates a affine transformation matrix containing a …\nCreates a quaternion from the given Euler rotation …\nCreates an affine transformation matrix from the given 2x2 …\nCreates an affine transformation matrix from the given 3x3 …\nCreates a quaternion from a 3x3 rotation matrix.\nCreates an affine transformation matrix from the given 3x3 …\nCreates a quaternion from a 3x3 rotation matrix.\nCreates an affine transformation matrix from the given 3x3 …\nCreates a quaternion from a 3x3 SIMD aligned rotation …\nCreates a quaternion from the upper 3x3 rotation matrix …\nCreates a 3x3 matrix from a 4x4 matrix, discarding the 4th …\nCreates a quaternion from the upper 3x3 rotation matrix …\nCreates a 3x3 matrix from the minor of the given 4x4 …\nleft-top corner plus a size (stretching right-down).\nBounding-box around the points.\nA zero-sized rect at a specific point.\nCreates an affine transformation matrix from the given …\nCreates a 3D rotation matrix from the given quaternion.\nCreates an affine transformation matrix from the given …\nGets the minimal rotation for transforming <code>from</code> to <code>to</code>.  …\nGets the minimal rotation for transforming <code>from</code> to <code>to</code>.  …\nGets the minimal rotation for transforming <code>from</code> to <code>to</code>.  …\nGets the minimal rotation for transforming <code>from</code> to <code>to</code>.  …\nGets the minimal rotation for transforming <code>from</code> to either …\nGets the minimal rotation for transforming <code>from</code> to either …\nCreates an affine transformation matrix from the given 3D …\nCreates an affine transformation matrix from the given 3D …\nCreates an affine transformation matrix containing a 3D …\nCreates a quaternion from the <code>angle</code> (in radians) around …\nCreates a 3D rotation matrix from <code>angle</code> (in radians) …\nCreates an affine transformation matrix containing a 3D …\nCreates a quaternion from the <code>angle</code> (in radians) around …\nCreates an affine transformation matrix containing a 3D …\nCreates a quaternion from the <code>angle</code> (in radians) around …\nCreates a 3D rotation matrix from <code>angle</code> (in radians) …\nCreates an affine transformation matrix containing a 3D …\nCreates a quaternion from the <code>angle</code> (in radians) around …\nCreates an affine transformation matrix containing a 3D …\nCreates a quaternion from the <code>angle</code> (in radians) around …\nCreates a 3D rotation matrix from <code>angle</code> (in radians) …\nCreates an affine transformation matrix containing a 3D …\nCreates a quaternion from the <code>angle</code> (in radians) around …\nCreates an affine transformation matrix containing the …\nCreates an affine transformation matrix from the given …\nCreates an affine transformation matrix containing the …\nCreates an affine transformation matrix from the given 2D …\nCreates an affine transformation matrix from the given 3D …\nCreates an affine transformation matrix from the given 3D …\nCreate a quaternion that rotates <code>v.length()</code> radians around …\nCreate a quaternion that rotates <code>v.length()</code> radians around …\nCreates a vector from the first 3 values in <code>slice</code>.\nCreates a rotation quaternion from a slice.\nCreates a rotation quaternion from a slice.\nCreates a vector from the first 2 values in <code>slice</code>.\nCreates a vector from the first 3 values in <code>slice</code>.\nCreates a vector from the first 4 values in <code>slice</code>.\nCreates an affine transformation matrix from the given 3D …\nCreates an affine transformation matrix from the given 2D …\nCreates an affine transformation matrix from the given 3D …\nReturns the bounding rectangle of the two points.\nCreates a new rotation quaternion from a 4D vector.\nCreates a new rotation quaternion from a 4D vector.\nCreates a new rotation quaternion.\nCreates a new rotation quaternion.\nThe intersection of two <code>Rect</code>, i.e. the area covered by …\nDoes this Rect intersect the given ray (where <code>d</code> is …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the inverse of <code>self</code>.\nReturns the inverse of a normalized quaternion.\nReturns the inverse of <code>self</code>.\nReturns the inverse of <code>self</code>.\nReturns the inverse of a normalized quaternion.\nTrue if all members are also finite.\nTrue if all members are also finite.\nTrue if all members are also finite.\nReturns <code>true</code> if, and only if, all elements are finite.  If …\nReturns <code>true</code> if, and only if, all elements are finite. If …\nReturns <code>true</code> if, and only if, all elements are finite. If …\nReturns <code>true</code> if, and only if, all elements are finite. If …\nReturns <code>true</code> if, and only if, all elements are finite. If …\nReturns <code>true</code> if, and only if, all elements are finite. If …\nReturns <code>true</code> if, and only if, all elements are finite.  If …\nReturns <code>true</code> if, and only if, all elements are finite.  If …\nReturns <code>true</code> if, and only if, all elements are finite.  If …\nPerforms <code>is_finite</code> on each element of self, returning a …\nPerforms <code>is_finite</code> on each element of self, returning a …\nPerforms <code>is_finite</code> on each element of self, returning a …\nPerforms <code>is_finite</code> on each element of self, returning a …\nReturns <code>true</code> if any elements are <code>NaN</code>.\nReturns <code>true</code> if any elements are <code>NaN</code>.\nReturns <code>true</code> if any elements are <code>NAN</code>.\nReturns <code>true</code> if any elements are <code>NaN</code>.\nReturns <code>true</code> if any elements are <code>NaN</code>.\nReturns <code>true</code> if any elements are <code>NAN</code>.\nReturns <code>true</code> if any elements are <code>NaN</code>.\nReturns <code>true</code> if any elements are <code>NaN</code>.\nReturns <code>true</code> if any elements are <code>NaN</code>.\nPerforms <code>is_nan</code> on each element of self, returning a …\nPerforms <code>is_nan</code> on each element of self, returning a …\nPerforms <code>is_nan</code> on each element of self, returning a …\nPerforms <code>is_nan</code> on each element of self, returning a …\n<code>width &lt; 0 || height &lt; 0</code>\nReturns a bitmask with the lowest 3 bits set to the sign …\nReturns a bitmask with the lowest 2 bits set to the sign …\nReturns a bitmask with the lowest 3 bits set to the sign …\nReturns a bitmask with the lowest 4 bits set to the sign …\nReturns whether <code>self</code> is length <code>1.0</code> or not.\nReturns whether <code>self</code> of length <code>1.0</code> or not.\nReturns whether <code>self</code> of length <code>1.0</code> or not.\nReturns whether <code>self</code> is length <code>1.0</code> or not.\nReturns whether <code>self</code> is length <code>1.0</code> or not.\nReturns whether <code>self</code> is length <code>1.0</code> or not.\n<code>width &gt; 0 &amp;&amp; height &gt; 0</code>\n<code>min.x</code>\n<code>min.x</code>\nComputes the length of <code>self</code>.\nComputes the length of <code>self</code>.\nComputes the length of <code>self</code>.\nComputes the length of <code>self</code>.\nComputes the length of <code>self</code>.\nComputes the length of <code>self</code>.\nComputes <code>1.0 / length()</code>.\nComputes <code>1.0 / length()</code>.\nComputes <code>1.0 / length()</code>.\nComputes <code>1.0 / length()</code>.\nComputes <code>1.0 / length()</code>.\nComputes <code>1.0 / length()</code>.\nComputes the squared length of <code>self</code>.\nComputes the squared length of <code>self</code>.\nComputes the squared length of <code>self</code>.\nComputes the squared length of <code>self</code>.\nComputes the squared length of <code>self</code>.\nComputes the squared length of <code>self</code>.\nLinearly interpolate towards another point, so that …\nPerforms a linear interpolation between <code>self</code> and <code>rhs</code> based …\nPerforms a linear interpolation between <code>self</code> and <code>rhs</code> based …\nPerforms a linear interpolation between <code>self</code> and <code>rhs</code> based …\nPerforms a linear interpolation between <code>self</code> and <code>rhs</code> based …\nPerforms a linear interpolation between <code>self</code> and <code>rhs</code> based …\nPerforms a linear interpolation between <code>self</code> and <code>rhs</code> based …\nLinearly interpolate so that <code>[0, 0]</code> is <code>Self::min</code> and <code>[1, 1]</code>…\nLinearly self towards other rect.\nCreates a left-handed view matrix using a camera position, …\nCreates a left-handed view matrix using a camera position, …\nCreates a right-handed view matrix using a camera …\nCreates a right-handed view matrix using a camera …\nCreates a left-handed view matrix using a camera position, …\nCreates a left-handed view matrix using a camera position, …\nCreates a right-handed view matrix using a camera …\nCreates a right-handed view matrix using a camera …\nReturns a vector containing each element of <code>self</code> modified …\nReturns a vector containing each element of <code>self</code> modified …\nReturns a vector containing each element of <code>self</code> modified …\nReturns a vector containing each element of <code>self</code> modified …\nReturns a vector containing the maximum values for each …\nReturns a vector containing the maximum values for each …\nReturns a vector containing the maximum values for each …\nReturns a vector containing the maximum values for each …\nThe other corner, opposing <code>Self::min</code>. Usually the right …\nReturns the maximum of <code>self.x</code> and <code>self.y</code>.\nReturns the horizontal maximum of <code>self</code>.\nReturns the horizontal maximum of <code>self</code>.\nReturns the horizontal maximum of <code>self</code>.\nReturns the horizontal maximum of <code>self</code>.\nCalculates the midpoint between <code>self</code> and <code>rhs</code>.\nCalculates the midpoint between <code>self</code> and <code>rhs</code>.\nCalculates the midpoint between <code>self</code> and <code>rhs</code>.\nCalculates the midpoint between <code>self</code> and <code>rhs</code>.\nReturns a vector containing the minimum values for each …\nReturns a vector containing the minimum values for each …\nReturns a vector containing the minimum values for each …\nReturns a vector containing the minimum values for each …\nOne of the corners of the rectangle, usually the left top …\nReturns the minimum of <code>self.x</code> and <code>self.y</code>.\nReturns the horizontal minimum of <code>self</code>.\nReturns the horizontal minimum of <code>self</code>.\nReturns the horizontal minimum of <code>self</code>.\nReturns the horizontal minimum of <code>self</code>.\nMoves towards <code>rhs</code> based on the value <code>d</code>.\nMoves towards <code>rhs</code> based on the value <code>d</code>.\nMoves towards <code>rhs</code> based on the value <code>d</code>.\nMoves towards <code>rhs</code> based on the value <code>d</code>.\nMultiplies a quaternion and a 3D vector, returning the …\nMultiplies two quaternions. If they each represent a …\nMultiplies a quaternion by a scalar value.\nMultiplies a quaternion by a scalar value.\nMultiplies two quaternions. If they each represent a …\nMultiplies a quaternion and a 3D vector, returning the …\nFused multiply-add. Computes <code>(self * a) + b</code> element-wise …\nFused multiply-add. Computes <code>(self * a) + b</code> element-wise …\nFused multiply-add. Computes <code>(self * a) + b</code> element-wise …\nFused multiply-add. Computes <code>(self * a) + b</code> element-wise …\nMultiplies two quaternions. If they each represent a …\nMultiplies two quaternions. If they each represent a …\nMultiplies two 3x3 matrices.\nMultiplies two 4x4 matrices.\nMultiplies two 4x4 matrices.\nMultiplies two quaternions. If they each represent a …\nMultiplies two quaternions. If they each represent a …\nMultiplies a 4x4 matrix by a scalar.\nMultiplies a 3x3 matrix by a scalar.\nMultiplies a 4x4 matrix by a scalar.\nMultiplies a quaternion and a 3D vector, returning the …\nTransforms a 3D vector.\nMultiplies a quaternion and a 3D vector, returning the …\nMultiplies a quaternion and a 3D vector, returning the …\nTransforms a 4D vector.\nTransforms a 4D vector.\nCreates a new vector.\nCreates a new vector.\nCreates a new vector.\nCreates a new vector.\nReturns <code>self</code> normalized to length 1.0.\nReturns <code>self</code> normalized to length 1.0.\nReturns <code>self</code> normalized to length 1.0.\nReturns <code>self</code> normalized to length 1.0.\nReturns <code>self</code> normalized to length 1.0.\nReturns <code>self</code> normalized to length 1.0.\nReturns <code>self</code> normalized to length 1.0 if possible, else …\nReturns <code>self</code> normalized to length 1.0 if possible, else …\nReturns <code>self</code> normalized to length 1.0 if possible, else …\nReturns <code>self</code> normalized to length 1.0 if possible, else …\nReturns <code>self</code> normalized to length 1.0 if possible, else …\nReturns <code>self</code> normalized to length 1.0 if possible, else …\nReturns <code>self</code> normalized to length 1.0 if possible, else …\nReturns <code>self</code> normalized to length 1.0 if possible, else …\nSafe normalize: returns zero if input is zero.\nCreates a left-handed orthographic projection matrix with …\nCreates a left-handed orthographic projection matrix with …\nCreates a right-handed orthographic projection matrix with …\nCreates a right-handed orthographic projection matrix with …\nCreates a right-handed orthographic projection matrix with …\nCreates a right-handed orthographic projection matrix with …\nReturns a vector that is equal to <code>self</code> rotated by 90 …\nThe perpendicular dot product of <code>self</code> and <code>rhs</code>. Also known …\nCreates an infinite left-handed perspective projection …\nCreates an infinite left-handed perspective projection …\nCreates an infinite reverse left-handed perspective …\nCreates an infinite reverse left-handed perspective …\nCreates an infinite reverse right-handed perspective …\nCreates an infinite reverse right-handed perspective …\nCreates an infinite right-handed perspective projection …\nCreates an infinite right-handed perspective projection …\nCreates a left-handed perspective projection matrix with …\nCreates a left-handed perspective projection matrix with …\nCreates a right-handed perspective projection matrix with …\nCreates a right-handed perspective projection matrix with …\nCreates a right-handed perspective projection matrix with …\nCreates a right-handed perspective projection matrix with …\nReturns a vector containing each element of <code>self</code> raised to …\nReturns a vector containing each element of <code>self</code> raised to …\nReturns a vector containing each element of <code>self</code> raised to …\nReturns a vector containing each element of <code>self</code> raised to …\nReturns the vector projection of <code>self</code> onto <code>rhs</code>.\nReturns the vector projection of <code>self</code> onto <code>rhs</code>.\nReturns the vector projection of <code>self</code> onto <code>rhs</code>.\nReturns the vector projection of <code>self</code> onto <code>rhs</code>.\nReturns the vector projection of <code>self</code> onto <code>rhs</code>.\nReturns the vector projection of <code>self</code> onto <code>rhs</code>.\nReturns the vector projection of <code>self</code> onto <code>rhs</code>.\nReturns the vector projection of <code>self</code> onto <code>rhs</code>.\nTransforms the given 3D vector as a point, applying …\nTransforms the given 3D vector as a point, applying …\nTransforms the given <code>Vec3A</code> as a 3D point, applying …\nReturns a vector containing the reciprocal <code>1.0/n</code> of each …\nReturns a vector containing the reciprocal <code>1.0/n</code> of each …\nReturns a vector containing the reciprocal <code>1.0/n</code> of each …\nReturns a vector containing the reciprocal <code>1.0/n</code> of each …\nReturns the reflection vector for a given incident vector …\nReturns the reflection vector for a given incident vector …\nReturns the reflection vector for a given incident vector …\nReturns the reflection vector for a given incident vector …\nReturns the refraction direction for a given incident …\nReturns the refraction direction for a given incident …\nReturns the refraction direction for a given incident …\nReturns the refraction direction for a given incident …\nReturns the vector rejection of <code>self</code> from <code>rhs</code>.\nReturns the vector rejection of <code>self</code> from <code>rhs</code>.\nReturns the vector rejection of <code>self</code> from <code>rhs</code>.\nReturns the vector rejection of <code>self</code> from <code>rhs</code>.\nReturns the vector rejection of <code>self</code> from <code>rhs</code>.\nReturns the vector rejection of <code>self</code> from <code>rhs</code>.\nReturns the vector rejection of <code>self</code> from <code>rhs</code>.\nReturns the vector rejection of <code>self</code> from <code>rhs</code>.\nReturns the element-wise remainder of Euclidean division …\nReturns the element-wise remainder of Euclidean division …\nReturns the element-wise remainder of Euclidean division …\nReturns the element-wise remainder of Euclidean division …\n<code>max.x</code>\n<code>max.x</code>\nRotates the vector by 90°, i.e positive X to positive Y …\nReturns <code>rhs</code> rotated by the angle of <code>self</code>. If <code>self</code> is …\nRotate the bounds (will expand the <code>Rect</code>)\nRotates towards <code>rhs</code> up to <code>max_angle</code> (in radians).\nRotates towards <code>rhs</code> up to <code>max_angle</code> (in radians).\nRotates towards <code>rhs</code> up to <code>max_angle</code> (in radians).\nReturns a vector containing the nearest integer to a …\nReturns a vector containing the nearest integer to a …\nReturns a vector containing the nearest integer to a …\nReturns a vector containing the nearest integer to a …\nReturns the matrix row for the given <code>index</code>.\nReturns the matrix row for the given <code>index</code>.\nReturns the matrix row for the given <code>index</code>.\nScale up by this factor in each direction, keeping the …\nScale up by this factor in each direction, keeping the …\nCreates a vector from the elements in <code>if_true</code> and <code>if_false</code>…\nCreates a vector from the elements in <code>if_true</code> and <code>if_false</code>…\nCreates a vector from the elements in <code>if_true</code> and <code>if_false</code>…\nCreates a vector from the elements in <code>if_true</code> and <code>if_false</code>…\n<code>max.y</code>\nKeep size\nkeep min\n<code>min.x</code>\n<code>max.x</code>\n<code>min.y</code>\nkeep min\nShrink by this much in each direction, keeping the center\nShrink by this much in each direction, keeping the center\nSigned distance to the edge of the box.\nReturns a vector with elements representing the sign of …\nReturns a vector with elements representing the sign of …\nReturns a vector with elements representing the sign of …\nReturns a vector with elements representing the sign of …\n<code>rect.size() == Vec2 { x: rect.width(), y: rect.height() }</code>\nPerforms a spherical linear interpolation between <code>self</code> and …\nPerforms a spherical linear interpolation between <code>self</code> and …\nSet both <code>x</code> and <code>y</code> to the same value.\nCreates a vector with all elements set to <code>v</code>.\nCreates a vector with all elements set to <code>v</code>.\nCreates a vector with all elements set to <code>v</code>.\nCreates a vector with all elements set to <code>v</code>.\nSplit rectangle in left and right halves. <code>t</code> is expected to …\nSplit rectangle in left and right halves at the given <code>x</code> …\nSplit rectangle in top and bottom halves. <code>t</code> is expected to …\nSplit rectangle in top and bottom halves at the given <code>y</code> …\n<code>[2, 1]</code> for wide screen, and <code>[1, 2]</code> for portrait, etc. At …\nSubtracts the <code>rhs</code> quaternion from <code>self</code>.\nSubtracts the <code>rhs</code> quaternion from <code>self</code>.\nSubtracts two 3x3 matrices.\nSubtracts two 4x4 matrices.\nSubtracts two 4x4 matrices.\nReturns the angle (in radians) of this vector in the range …\n<code>[x, y, z]</code>\n<code>[x, y, z, w]</code>\n<code>[x, y, z, w]</code>\n<code>[x, y]</code>\n<code>[x, y, z]</code>\n<code>[x, y, z, w]</code>\nReturns the rotation axis (normalized) and angle (in …\nReturns the rotation axis (normalized) and angle (in …\nCreates a <code>[f32; 16]</code> array storing data in column major …\nCreates a <code>[f64; 9]</code> array storing data in column major …\nCreates a <code>[f64; 16]</code> array storing data in column major …\nCreates a <code>[[f32; 4]; 4]</code> 4D array storing data in column …\nCreates a <code>[[f64; 3]; 3]</code> 3D array storing data in column …\nCreates a <code>[[f64; 4]; 4]</code> 4D array storing data in column …\nExtract Euler angles with the given Euler rotation order.\nReturns the rotation angles for the given euler rotation …\nExtract Euler angles with the given Euler rotation order.\nExtract Euler angles with the given Euler rotation order.\nReturns the rotation angles for the given euler rotation …\nTreat this vector as a position. <code>v.to_pos2()</code> is equivalent …\nExtracts <code>scale</code>, <code>rotation</code> and <code>translation</code> from <code>self</code>. The …\nExtracts <code>scale</code>, <code>rotation</code> and <code>translation</code> from <code>self</code>. The …\nReturns the rotation axis scaled by the rotation in …\nReturns the rotation axis scaled by the rotation in …\nThe vector from origin to this position. <code>p.to_vec2()</code> is …\n<code>min.y</code>\n<code>min.y</code>\nTransforms the given 2D vector as a point.\nTransforms the given 3D vector as a point.\nTransforms the given 3D vector as a point.\nTransforms the given <code>Vec3A</code> as 3D point.\nRotates the given 2D vector.\nTransforms the give 3D vector as a direction.\nTransforms the give 3D vector as a direction.\nTransforms the give <code>Vec3A</code> as 3D vector.\nReturns the transpose of <code>self</code>.\nReturns the transpose of <code>self</code>.\nReturns the transpose of <code>self</code>.\nReturns a vector containing the integer part each element …\nReturns a vector containing the integer part each element …\nReturns a vector containing the integer part each element …\nReturns a vector containing the integer part each element …\nCreates a 2D vector from the <code>x</code> and <code>y</code> elements of <code>self</code>, …\nCreates a 2D vector from the <code>x</code> and <code>y</code> elements of <code>self</code>, …\nCreates a 3D vector from the <code>x</code>, <code>y</code> and <code>z</code> elements of <code>self</code>, …\nReturns <code>self</code> normalized to length 1.0 if possible, else …\nReturns <code>self</code> normalized to length 1.0 if possible, else …\nReturns <code>self</code> normalized to length 1.0 if possible, else …\nReturns <code>self</code> normalized to length 1.0 if possible, else …\nThe union of two bounding rectangle, i.e. the minimum <code>Rect</code> …\nCreates a 4D vector from <code>self</code> with the given value of <code>w</code>.\nCreates a 3D vector from <code>self</code> with the given value of <code>x</code>.\nCreates a 2D vector from <code>self</code> with the given value of <code>x</code>.\nCreates a 3D vector from <code>self</code> with the given value of <code>x</code>.\nCreates a 4D vector from <code>self</code> with the given value of <code>x</code>.\nCreates a 3D vector from <code>self</code> with the given value of <code>y</code>.\nCreates a 2D vector from <code>self</code> with the given value of <code>y</code>.\nCreates a 3D vector from <code>self</code> with the given value of <code>y</code>.\nCreates a 4D vector from <code>self</code> with the given value of <code>y</code>.\nCreates a 3D vector from <code>self</code> with the given value of <code>z</code>.\nCreates a 3D vector from <code>self</code> with the given value of <code>z</code>.\nCreates a 4D vector from <code>self</code> with the given value of <code>z</code>.\nWrites the columns of <code>self</code> to the first 16 elements in …\nWrites the columns of <code>self</code> to the first 9 elements in <code>slice</code>…\nWrites the columns of <code>self</code> to the first 16 elements in …\nWrites the elements of <code>self</code> to the first 3 elements in …\nWrites the quaternion to an unaligned slice.\nWrites the quaternion to an unaligned slice.\nWrites the elements of <code>self</code> to the first 2 elements in …\nWrites the elements of <code>self</code> to the first 3 elements in …\nWrites the elements of <code>self</code> to the first 4 elements in …\nHow far to the right.\nRightwards. Width.\nReturns the vector part of the quaternion.\nReturns the vector part of the quaternion.\nHow far down.\nDownwards. Height.\nSwizzle the axes.\nAn <code>EnumSet</code> containing all valid variants of the enum.\nThis format is used for space-efficient color …\nAn empty <code>EnumSet</code>.\nAn efficient set type for enums.\nA rectangular region of space.\nReturns an <code>EnumSet</code> containing all valid variants of the …\nReturns an <code>[u64; O]</code> representing the elements of this set.\nReturns an <code>[u64; O]</code> representing the elements of this set.\nReturns a <code>T::Repr</code> representing the elements of this set.\nReturns a <code>u128</code> representing the elements of this set.\nReturns a truncated <code>u128</code> representing the elements of this …\nReturns a <code>u16</code> representing the elements of this set.\nReturns a truncated <code>u16</code> representing the elements of this …\nReturns a <code>u32</code> representing the elements of this set.\nReturns a truncated <code>u32</code> representing the elements of this …\nReturns a <code>u64</code> representing the elements of this set.\nReturns a truncated <code>u64</code> representing the elements of this …\nReturns a <code>u8</code> representing the elements of this set.\nReturns a truncated <code>u8</code> representing the elements of this …\nReturns a <code>usize</code> representing the elements of this set.\nReturns a truncated <code>usize</code> representing the elements of …\nTotal number of bits used by this type. Note that the …\nRemoves all elements from the set.\nReturns a set containing all enum variants not in this set.\nChecks whether this set contains a value.\nCopies the elements of this set into a <code>&amp;mut [u64]</code>.\nCopies the elements of this set into a <code>&amp;mut [u64]</code>.\nReturns an empty set.\nReturns a set containing element present in <code>self</code> but not …\nCreates an empty <code>EnumSet</code>.\nCreates a EnumSet literal, which can be used in const …\nReturns the argument unchanged.\nAttempts to constructs a bitset from a <code>[u64; O]</code>.\nConstructs a bitset from a <code>[u64; O]</code>, ignoring bits that do …\nConstructs a bitset from a <code>[u64; O]</code>, without checking for …\nConstructs a bitset from a <code>T::Repr</code>.\nConstructs a bitset from a <code>T::Repr</code>, ignoring invalid …\nConstructs a bitset from a <code>T::Repr</code> without checking for …\nAttempts to constructs a bitset from a <code>&amp;[u64]</code>.\nConstructs a bitset from a <code>&amp;[u64]</code>, ignoring bits that do …\nConstructs a bitset from a <code>&amp;[u64]</code>, without checking for …\nConstructs a bitset from a <code>u128</code>.\nConstructs a bitset from a <code>u128</code>, ignoring bits that do not …\nConstructs a bitset from a <code>u128</code>, without checking for …\nConstructs a bitset from a <code>u16</code>.\nConstructs a bitset from a <code>u16</code>, ignoring bits that do not …\nConstructs a bitset from a <code>u16</code>, without checking for …\nConstructs a bitset from a <code>u32</code>.\nConstructs a bitset from a <code>u32</code>, ignoring bits that do not …\nConstructs a bitset from a <code>u32</code>, without checking for …\nConstructs a bitset from a <code>u64</code>.\nConstructs a bitset from a <code>u64</code>, ignoring bits that do not …\nConstructs a bitset from a <code>u64</code>, without checking for …\nConstructs a bitset from a <code>u8</code>.\nConstructs a bitset from a <code>u8</code>, ignoring bits that do not …\nConstructs a bitset from a <code>u8</code>, without checking for …\nConstructs a bitset from a <code>usize</code>.\nConstructs a bitset from a <code>usize</code>, ignoring bits that do …\nConstructs a bitset from a <code>usize</code>, without checking for …\nAdds a value to this set.\nAdds all elements in another set to this one.\nReturns a set containing every element present in both …\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>self</code> has no elements in common with <code>other</code>. …\nReturns <code>true</code> if the set contains no elements.\nReturns <code>true</code> if the set is a subset of another, i.e., <code>other</code>…\nReturns <code>true</code> if the set is a superset of another, i.e., …\nIterates the contents of the set in order from the least …\nReturns the number of elements in this set.\nThe other corner, opposing <code>Self::min</code>. Usually the right …\nOne of the corners of the rectangle, usually the left top …\nCreates an empty <code>EnumSet</code>.\nReturns an <code>EnumSet</code> containing a single element.\nRemoves a value from this set. Returns whether the value …\nRemoves all values in another set from this one.\nReturns a set containing every element present in either …\nReturns an <code>[u64; O]</code> representing the elements of this set.\nTries to return a <code>u128</code> representing the elements of this …\nTries to return a <code>u16</code> representing the elements of this …\nTries to return a <code>u32</code> representing the elements of this …\nTries to return a <code>u64</code> representing the elements of this …\nTries to return a <code>u8</code> representing the elements of this set.\nTries to return a <code>usize</code> representing the elements of this …\nCopies the elements of this set into a <code>&amp;mut [u64]</code>.\nAttempts to constructs a bitset from a <code>[u64; O]</code>.\nAttempts to constructs a bitset from a <code>T::Repr</code>.\nAttempts to constructs a bitset from a <code>&amp;[u64]</code>.\nAttempts to constructs a bitset from a <code>u128</code>.\nAttempts to constructs a bitset from a <code>u16</code>.\nAttempts to constructs a bitset from a <code>u32</code>.\nAttempts to constructs a bitset from a <code>u64</code>.\nAttempts to constructs a bitset from a <code>u8</code>.\nAttempts to constructs a bitset from a <code>usize</code>.\nReturns a set containing any elements present in either …\nThe number of valid variants that this type can contain.")